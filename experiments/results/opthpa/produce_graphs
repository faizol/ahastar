#### Graph Size Table ####
### graphsize table ####
gs_trendmean <- mean(100-(graphsize[grep("AR*", graphsize$map), 3]/graphsize[grep("AR*", graphsize$map), 1])*100)
gs_trendmean <- rbind(gs_trendmean, 
mean(100-(graphsize[grep("adaptive*", graphsize$map), 3]/graphsize[grep("adaptive*", graphsize$map), 1])*100))
gs_trendmean <- rbind(gs_trendmean, 
mean(100-(graphsize[grep("*room*", graphsize$map), 3]/graphsize[grep("*room*", graphsize$map), 1])*100))
row.names(gs_trendmean) <- c("BG", "AD", "Rooms")
names(gs_trendmean) <- c("pctnodes")

gs_trendmin <- min(100-(graphsize[grep("AR*", graphsize$map), 3]/graphsize[grep("AR*", graphsize$map), 1])*100)
gs_trendmin <- rbind(gs_trendmin, 
min(100-(graphsize[grep("adaptive*", graphsize$map), 3]/graphsize[grep("adaptive*", graphsize$map), 1])*100))
gs_trendmin <- rbind(gs_trendmin, 
min(100-(graphsize[grep("*room*", graphsize$map), 3]/graphsize[grep("*room*", graphsize$map), 1])*100))
row.names(gs_trendmin) <- c("BG", "AD", "Rooms")
names(gs_trendmin) <- c("min")

gs_trendmax <- max(100-(graphsize[grep("AR*", graphsize$map), 3]/graphsize[grep("AR*", graphsize$map), 1])*100)
gs_trendmax <- rbind(gs_trendmax, 
max(100-(graphsize[grep("adaptive*", graphsize$map), 3]/graphsize[grep("adaptive*", graphsize$map), 1])*100))
gs_trendmax <- rbind(gs_trendmax, 
max(100-(graphsize[grep("*room*", graphsize$map), 3]/graphsize[grep("*room*", graphsize$map), 1])*100))
row.names(gs_trendmax) <- c("BG", "AD", "Rooms")
names(gs_trendmax) <- c("max")

gs_trendsd <- sd(100-(graphsize[grep("AR*", graphsize$map), 3]/graphsize[grep("AR*", graphsize$map), 1])*100)
gs_trendsd <- rbind(gs_trendsd, 
sd(100-(graphsize[grep("adaptive*", graphsize$map), 3]/graphsize[grep("adaptive*", graphsize$map), 1])*100))
gs_trendsd <- rbind(gs_trendsd, 
sd(100-(graphsize[grep("*room*", graphsize$map), 3]/graphsize[grep("*room*", graphsize$map), 1])*100))
row.names(gs_trendsd) <- c("BG", "AD", "Rooms")
names(gs_trendsd) <- c("sd")

gs_trend <- as.data.frame(cbind(gs_trendmean, gs_trendmin, gs_trendmax, gs_trendsd))
names(gs_trend) <- c("mean", "min", "max", "sd");

#### Speedup Graphs #### 


bg_trend <- as.data.frame(ams(1/(bg_ohastar$ne/bg_astar$ne), bg_astar$opl, 25))
bg_trend <- cbind(bg_trend, ams(bg_astar$st/bg_ohastar$st, bg_astar$opl,
25)$avgseries)
names(bg_trend) <- c("opl", "ne_speedup", "st_speedup")


ad_trend <- as.data.frame(ams(1/(ad_ohastar$ne/ad_astar$ne), ad_astar$opl, 25))
ad_trend <- cbind(ad_trend, ams(ad_astar$st/ad_ohastar$st, ad_astar$opl,
25)$avgseries)
names(ad_trend) <- c("opl", "ne_speedup", "st_speedup")

rooms_trend <- as.data.frame(ams(1/(rooms_ohastar$ne/rooms_astar$ne), rooms_astar$opl, 25))
rooms_trend <- cbind(rooms_trend, ams(rooms_astar$st/rooms_ohastar$st, rooms_astar$opl,
25)$avgseries)
names(rooms_trend) <- c("opl", "ne_speedup", "st_speedup")

pdf(width=15, height=5, file="speedup.pdf")
par(mfrow=c(1,3))

plot(ad_trend$ne_speedup ~ ad_trend$opl, type="l", lty=1,   
main="Average Speedup: Adaptive Depth", ylab="Avg. Speedup Factor", 
xlab="Path Length", ylim=c(1,10), cex.main=2)
lines(ad_trend$st_speedup ~ ad_trend$opl, type="l", lty=2)
legend("topleft", c("Nodes Expanded", "Search Time"),  lty=c(1,2), cex=1.25)

plot(bg_trend$ne_speedup ~ bg_trend$opl, type="l", lty=1,   
main="Average Speedup: Baldur's Gate", ylab="Avg. Speedup Factor", 
xlab="Path Length", ylim=c(1,10), cex.main=2)
lines(bg_trend$st_speedup ~ bg_trend$opl, type="l", lty=2)
legend("topleft", c("Nodes Expanded", "Search Time"),  lty=c(1,2), cex=1.25)

plot(rooms_trend$ne_speedup ~ rooms_trend$opl, type="l", lty=1,   
main="Average Speedup: Rooms", ylab="Avg. Speedup Factor", 
xlab="Path Length", ylim=c(1,10), cex.main=2)
lines(rooms_trend$st_speedup ~ rooms_trend$opl, type="l", lty=2)
legend("topleft", c("Nodes Expanded", "Search Time"),  lty=c(1,2), cex=1.25)

dev.off()
