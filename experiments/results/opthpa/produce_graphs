#### Graph Size Table ####
### graphsize table ####
gs_trendmean <- mean(100-(graphsize[grep("AR*", graphsize$map), 3]/graphsize[grep("AR*", graphsize$map), 1])*100)
gs_trendmean <- rbind(gs_trendmean, 
mean(100-(graphsize[grep("adaptive*", graphsize$map), 3]/graphsize[grep("adaptive*", graphsize$map), 1])*100))
gs_trendmean <- rbind(gs_trendmean, 
mean(100-(graphsize[grep("*room*", graphsize$map), 3]/graphsize[grep("*room*", graphsize$map), 1])*100))
row.names(gs_trendmean) <- c("BG", "AD", "Rooms")
names(gs_trendmean) <- c("pctnodes")

gs_trendmin <- min(100-(graphsize[grep("AR*", graphsize$map), 3]/graphsize[grep("AR*", graphsize$map), 1])*100)
gs_trendmin <- rbind(gs_trendmin, 
min(100-(graphsize[grep("adaptive*", graphsize$map), 3]/graphsize[grep("adaptive*", graphsize$map), 1])*100))
gs_trendmin <- rbind(gs_trendmin, 
min(100-(graphsize[grep("*room*", graphsize$map), 3]/graphsize[grep("*room*", graphsize$map), 1])*100))
row.names(gs_trendmin) <- c("BG", "AD", "Rooms")
names(gs_trendmin) <- c("min")

gs_trendmax <- max(100-(graphsize[grep("AR*", graphsize$map), 3]/graphsize[grep("AR*", graphsize$map), 1])*100)
gs_trendmax <- rbind(gs_trendmax, 
max(100-(graphsize[grep("adaptive*", graphsize$map), 3]/graphsize[grep("adaptive*", graphsize$map), 1])*100))
gs_trendmax <- rbind(gs_trendmax, 
max(100-(graphsize[grep("*room*", graphsize$map), 3]/graphsize[grep("*room*", graphsize$map), 1])*100))
row.names(gs_trendmax) <- c("BG", "AD", "Rooms")
names(gs_trendmax) <- c("max")

gs_trendsd <- sd(100-(graphsize[grep("AR*", graphsize$map), 3]/graphsize[grep("AR*", graphsize$map), 1])*100)
gs_trendsd <- rbind(gs_trendsd, 
sd(100-(graphsize[grep("adaptive*", graphsize$map), 3]/graphsize[grep("adaptive*", graphsize$map), 1])*100))
gs_trendsd <- rbind(gs_trendsd, 
sd(100-(graphsize[grep("*room*", graphsize$map), 3]/graphsize[grep("*room*", graphsize$map), 1])*100))
row.names(gs_trendsd) <- c("BG", "AD", "Rooms")
names(gs_trendsd) <- c("sd")

gs_trend <- as.data.frame(cbind(gs_trendmean, gs_trendmin, gs_trendmax, gs_trendsd))
names(gs_trend) <- c("mean", "min", "max", "sd");

# decomposition performance (avg room size and avg nodes pruned per room)
gs_trendanr <- as.data.frame(mean(graphsize[grep("AR*", graphsize$map), 5]))
gs_trendanr <- rbind(gs_trendanr, mean(graphsize[grep("adaptive*", graphsize$map), 5]))
gs_trendanr <- rbind(gs_trendanr, mean(graphsize[grep("*room*", graphsize$map), 5]))
row.names(gs_trendanr) <- c("BG", "AD", "Rooms")
names(gs_trendanr) <- c("avg_room")

gs_trendanp <- as.data.frame(mean(graphsize[grep("AR*", graphsize$map), 6]))
gs_trendanp <- rbind(gs_trendanp, mean(graphsize[grep("adaptive*", graphsize$map), 6]))
gs_trendanp <- rbind(gs_trendanp, mean(graphsize[grep("*room*", graphsize$map), 6]))
row.names(gs_trendanp) <- c("BG", "AD", "Rooms")
names(gs_trendanp) <- c("avg_pruned")

#### Speedup Graphs #### 
ad_trend <- as.data.frame(ams(ad_astar$ne/ad_ohastar$ne, ad_astar$opl, 15))
ad_trend <- cbind(ad_trend[,1:2], ams(ad_astar$st/ad_ohastar$st, ad_astar$opl,
15)[,2:3])
names(ad_trend) <- c("opl", "ne_speedup", "st_speedup", "num_exp")

bg_trend <- as.data.frame(ams(bg_astar$ne/bg_ohastar$ne, bg_astar$opl, 25))
bg_trend <- cbind(bg_trend[,1:2], ams(bg_astar$st/bg_ohastar$st, bg_astar$opl,
25)[,2:3])
names(bg_trend) <- c("opl", "ne_speedup", "st_speedup", "num_exp")

rooms_trend <- as.data.frame(ams(rooms_astar$ne/rooms_ohastar$ne, rooms_astar$opl, 25))
rooms_trend <- cbind(rooms_trend[,1:2], ams(rooms_astar$st/rooms_ohastar$st, rooms_astar$opl,
25)[,2:3])
names(rooms_trend) <- c("opl", "ne_speedup", "st_speedup", "num_exp")

# drop points for which we have insufficient experiments
ad_trend <- ad_trend[1:11,]
bg_trend <- bg_trend[1:18,]
rooms_trend <- rooms_trend[1:20, ] # remaining buckets have < 10 data points

pdf(width=15, height=5, file="speedup.pdf")
par(mfrow=c(1,3))

plot(ad_trend$ne_speedup ~ ad_trend$opl, type="l", lty=1,   
main="Average Speedup: Adaptive Depth", ylab="Avg. Speedup Factor", 
xlab="Path Length", ylim=c(1,10), cex.main=2)
lines(ad_trend$st_speedup ~ ad_trend$opl, type="l", lty=2)
legend("topleft", c("Nodes Expanded", "Search Time"),  lty=c(1,2), cex=1.25)

plot(bg_trend$ne_speedup ~ bg_trend$opl, type="l", lty=1,   
main="Average Speedup: Baldur's Gate", ylab="Avg. Speedup Factor", 
xlab="Path Length", ylim=c(1,10), cex.main=2)
lines(bg_trend$st_speedup ~ bg_trend$opl, type="l", lty=2)
legend("topleft", c("Nodes Expanded", "Search Time"),  lty=c(1,2), cex=1.25)

plot(rooms_trend$ne_speedup ~ rooms_trend$opl, type="l", lty=1,   
main="Average Speedup: Rooms", ylab="Avg. Speedup Factor", 
xlab="Path Length", ylim=c(1,10), cex.main=2)
lines(rooms_trend$st_speedup ~ rooms_trend$opl, type="l", lty=2)
legend("topleft", c("Nodes Expanded", "Search Time"),  lty=c(1,2), cex=1.25)

dev.off()

# branching factor stats
abf_trend_ad <- ams(ad_ohastar$nt / ad_ohastar$ne, ad_ohastar$opl, 15)[,1:2]
abf_trend_ad <- cbind(abf_trend_ad, ams(ad_astar$nt/ad_astar$ne, ad_astar$opl, 15)[,2:3])
names(abf_trend_ad) <- c("dist", "ps", "astar")

abf_trend_bg <- ams(bg_ohastar$nt / bg_ohastar$ne, bg_ohastar$opl, 25)[,1:2]
abf_trend_bg <- cbind(abf_trend_bg, ams(bg_astar$nt/bg_astar$ne, bg_astar$opl, 25)[,2:3])
names(abf_trend_bg) <- c("dist", "ps", "astar")

abf_trend_rooms <- ams(rooms_ohastar$nt / rooms_ohastar$ne, rooms_ohastar$opl, 25)[,1:2]
abf_trend_rooms <- cbind(abf_trend_rooms, ams(rooms_astar$nt/rooms_astar$ne, rooms_astar$opl, 25)[,2:3])
names(abf_trend_rooms) <- c("dist", "ps", "astar")

#drop points for which we have insufficient experiments
abf_trend_ad <- abf_trend_ad[1:11,]
abf_trend_bg <- abf_trend_bg[1:18,]
abf_trend_rooms <- abf_trend_rooms[1:20, ] # remaining buckets have < 10 data points

# branching factor graphs
pdf(width=15, height=5, file="branching.pdf")
par(mfrow=c(1,3))

plot(abf_trend_ad$ps ~ abf_trend_ad$dist, type="l", lty=1, 
main="Adaptive Depth: Avg. Branching Factor (8C PR BFR)", xlab="Path Length", ylab="Avg. Branching Factor", 
ylim=c(0,12))
lines(abf_trend_ad$astar ~ abf_trend_ad$dist, type="l", lty=2)
legend("topright", c("Perimeter Search", "A*"), lty=c(1, 2))

plot(abf_trend_bg$ps ~ abf_trend_bg$dist, type="l", lty=1, 
main="Baldur's Gate: Avg. Branching Factor (8C PR BFR)", xlab="Path Length", ylab="Avg. Branching Factor", 
ylim=c(0,12))
lines(abf_trend_bg$astar ~ abf_trend_bg$dist, type="l", lty=2)
legend("topright", c("Perimeter Search", "A*"), lty=c(1, 2))

plot(abf_trend_rooms$ps ~ abf_trend_rooms$dist, type="l", lty=1, 
main="Rooms: Avg. Branching Factor (8C PR BFR)", xlab="Path Length", ylab="Avg. Branching Factor", ylim=c(0,12))
lines(abf_trend_rooms$astar ~ abf_trend_rooms$dist, type="l", lty=2)
legend("topright", c("Perimeter Search", "A*"), lty=c(1, 2))

dev.off()
