#### Graph Size Table ####
### graphsize table ####
gs_trendmean <- mean((graphsize[grep("AR*", graphsize$map), 3]/graphsize[grep("AR*", graphsize$map), 1])*100)
gs_trendmean <- rbind(gs_trendmean, 
mean((graphsize[grep("adaptive*", graphsize$map), 3]/graphsize[grep("adaptive*", graphsize$map), 1])*100))
gs_trendmean <- rbind(gs_trendmean, 
mean((graphsize[grep("8room*", graphsize$map), 3]/graphsize[grep("8room*", graphsize$map), 1])*100))
gs_trendmean <- rbind(gs_trendmean, 
mean((graphsize[grep("16room*", graphsize$map), 3]/graphsize[grep("16room*", graphsize$map), 1])*100))
gs_trendmean <- rbind(gs_trendmean, 
mean((graphsize[grep("32room*", graphsize$map), 3]/graphsize[grep("32room*", graphsize$map), 1])*100))
gs_trendmean <- as.data.frame(gs_trendmean)
row.names(gs_trendmean) <- c("BG", "AD", "R8", "R16", "R32")
names(gs_trendmean) <- c("pctnodes")

gs_trendmin <- min((graphsize[grep("AR*", graphsize$map), 3]/graphsize[grep("AR*", graphsize$map), 1])*100)
gs_trendmin <- rbind(gs_trendmin, 
min((graphsize[grep("adaptive*", graphsize$map), 3]/graphsize[grep("adaptive*", graphsize$map), 1])*100))
gs_trendmin <- rbind(gs_trendmin, 
min((graphsize[grep("8room*", graphsize$map), 3]/graphsize[grep("8room*", graphsize$map), 1])*100))
gs_trendmin <- rbind(gs_trendmin, 
min((graphsize[grep("16room*", graphsize$map), 3]/graphsize[grep("16room*", graphsize$map), 1])*100))
gs_trendmin <- rbind(gs_trendmin, 
min((graphsize[grep("32room*", graphsize$map), 3]/graphsize[grep("32room*", graphsize$map), 1])*100))
gs_trendmin <- as.data.frame(gs_trendmin)
row.names(gs_trendmin) <- c("BG", "AD", "R8", "R16", "R32")
names(gs_trendmin) <- c("pctnodesmin")

gs_trendmax <- max((graphsize[grep("AR*", graphsize$map), 3]/graphsize[grep("AR*", graphsize$map), 1])*100)
gs_trendmax <- rbind(gs_trendmax, 
max((graphsize[grep("adaptive*", graphsize$map), 3]/graphsize[grep("adaptive*", graphsize$map), 1])*100))
gs_trendmax <- rbind(gs_trendmax, 
max((graphsize[grep("8room*", graphsize$map), 3]/graphsize[grep("8room*", graphsize$map), 1])*100))
gs_trendmax <- rbind(gs_trendmax, 
max((graphsize[grep("16room*", graphsize$map), 3]/graphsize[grep("16room*", graphsize$map), 1])*100))
gs_trendmax <- rbind(gs_trendmax, 
max((graphsize[grep("32room*", graphsize$map), 3]/graphsize[grep("32room*", graphsize$map), 1])*100))
gs_trendmax <- as.data.frame(gs_trendmax)
row.names(gs_trendmax) <- c("BG", "AD", "R8", "R16", "R32")
names(gs_trendmax) <- c("pctnodesmax")

gs_trend <- cbind(gs_trendmean, gs_trendmin, gs_trendmax)


#### Speedup Graphs #### 


bg_trend <- as.data.frame(ams(1/(bg_ohastar$ne/bg_astar$ne), bg_astar$opl, 25))
bg_trend <- cbind(bg_trend, ams(bg_astar$st/bg_ohastar$st, bg_astar$opl,
25)$avgseries)
names(bg_trend) <- c("opl", "ne_speedup", "st_speedup")


ad_trend <- as.data.frame(ams(1/(ad_ohastar$ne/ad_astar$ne), ad_astar$opl, 25))
ad_trend <- cbind(ad_trend, ams(ad_astar$st/ad_ohastar$st, ad_astar$opl,
25)$avgseries)
names(ad_trend) <- c("opl", "ne_speedup", "st_speedup")

rooms_trend <- as.data.frame(ams(1/(rooms_ohastar$ne/rooms_astar$ne), rooms_astar$opl, 25))
rooms_trend <- cbind(rooms_trend, ams(rooms_astar$st/rooms_ohastar$st, rooms_astar$opl,
25)$avgseries)
names(rooms_trend) <- c("opl", "ne_speedup", "st_speedup")

pdf(width=15, height=5, file="speedup.pdf")
par(mfrow=c(1,3))

plot(ad_trend$ne_speedup ~ ad_trend$opl, type="l", lty=1,  cex=0.70, 
main="Average Speedup: Adaptive Depth", ylab="Average Speedup", 
xlab="Path Length", ylim=c(1,5))
lines(ad_trend$st_speedup ~ ad_trend$opl, type="l", lty=2,  cex=0.70)
legend("topleft", c("Nodes Expanded", "Search Time"),  lty=c(1,2), cex=0.70,
pt.bg=c("white", "white"))

plot(bg_trend$ne_speedup ~ bg_trend$opl, type="l", lty=1,  cex=0.70, 
main="Average Speedup: Baldur's Gate", ylab="Average Speedup", 
xlab="Path Length", ylim=c(1,5))
lines(bg_trend$st_speedup ~ bg_trend$opl, type="l", lty=2,  cex=0.70)
legend("topleft", c("Nodes Expanded", "Search Time"),  lty=c(1,2), cex=0.70,
pt.bg=c("white", "white"))

plot(rooms_trend$ne_speedup ~ rooms_trend$opl, type="l", lty=1,  cex=0.70, 
main="Average Speedup: Rooms", ylab="Average Speedup", 
xlab="Path Length", ylim=c(1,5))
lines(rooms_trend$st_speedup ~ rooms_trend$opl, type="l", lty=2,  cex=0.70)
legend("topleft", c("Nodes Expanded", "Search Time"),  lty=c(1,2), cex=0.70,
pt.bg=c("white", "white"))

dev.off()
