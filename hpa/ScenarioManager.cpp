#include "ScenarioManager.h"
#include "mapAbstraction.h"

AbstractScenarioManager::~AbstractScenarioManager()
{
	for(unsigned int i=0; i < experiments.size(); i++)
	{
		delete experiments[i];
	}
	experiments.clear();
}

void AbstractScenarioManager::writeScenarioFile(const char* filelocation)
{
	if(experiments.size() == 0) // nothing to write
		return;
		
	float version = 2.1;	// v2.0 had distance after size/capability; 2.1 swaps them.
	std::ofstream scenariofile;
	scenariofile.precision(16);
	scenariofile.open(filelocation, std::ios::out);
	scenariofile << version<<std::endl;

	for(unsigned int i=0; i<experiments.size(); i++)
	{	
		Experiment*	cur = experiments.at(i);
		cur->print(scenariofile);
	}
	
	scenariofile.close();		
}

ScenarioManager::ScenarioManager()
{
}

ScenarioManager::~ScenarioManager()
{
}

void ScenarioManager::generateExperiments(mapAbstraction* absMap, 
		int numscenarios, int agentsize) throw(TooManyTriesException)
{
}

void ScenarioManager::loadScenarioFile(const char* filelocation)
{
	std::ifstream infile;
	infile.open(filelocation,std::ios::in);
	
	float version=0;
	infile >> version;
	
	if(version == 2.0)
	{
		loadV2ScenarioFile(infile);
	}

	if(version == 2.1)
	{
		loadV21ScenarioFile(infile);
	}

	if(version == 3)
	{
		loadV3ScenarioFile(infile);
	}

	infile.close();
}

// V2.0 scenario files are generated by AHAScenarioManager; ignore size/capability
void ScenarioManager::loadV21ScenarioFile(std::ifstream& infile)
{
	int xs, ys, xg, yg, capability, agentsize;
	float dist;
	string mapfile;
	while(infile>>mapfile>>xs>>ys>>xg>>yg>>dist>>capability>>agentsize)
		experiments.push_back(
			new Experiment(xs, ys, xg, yg, 1, 1, 0, dist, mapfile));
}

// V2.1 scenario files are generated by AHAScenarioManager; ignore size/capability
void ScenarioManager::loadV2ScenarioFile(std::ifstream& infile)
{
	int xs, ys, xg, yg, capability, agentsize;
	float dist;
	string mapfile;
	while(infile>>mapfile>>xs>>ys>>xg>>yg>>capability>>agentsize>>dist)
		experiments.push_back(
			new Experiment(xs, ys, xg, yg, 1, 1, 0, dist, mapfile));
}

void ScenarioManager::loadV3ScenarioFile(std::ifstream& infile)
{
	int xs, ys, xg, yg;
	float dist;
	string mapfile;
	while(infile>>mapfile>>xs>>ys>>xg>>yg>>dist)
		experiments.push_back(
			new Experiment(xs, ys, xg, yg, 1, 1, 0, dist, mapfile));
}

